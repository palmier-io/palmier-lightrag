[
  {
    "question": "How can I use the LightRAG class to query different modes of information retrieval?",
    "answer": "You can use the LightRAG class by creating an instance with a specified working directory and language model function. Then, you can call the 'query' method with a string input and a QueryParam object that specifies the mode (e.g., 'naive', 'local', 'global', 'hybrid') to get different responses based on the selected mode.",
    "context": {
      "file": "../../palmier-lightrag/query.py",
      "chunk_text": "from lightrag import LightRAG, QueryParam\nfrom lightrag.llm import gpt_4o_mini_complete, gpt_4o_complete\nimport os\nWORKING_DIR = './ragtest'\nif not os.path.exists(WORKING_DIR):\n    os.mkdir(WORKING_DIR)\nrag = LightRAG(working_dir=WORKING_DIR, llm_model_func=gpt_4o_mini_complete)\nprint(rag.query('what happens when i click the palmier tab button?', param=QueryParam(mode='naive')))\nprint(rag.query('what happens when i click the palmier tab button?', param=QueryParam(mode='local')))\nprint(rag.query('what happens when i click the palmier tab button?', param=QueryParam(mode='global')))\nprint(rag.query('what happens when i click the palmier tab button?', param=QueryParam(mode='hybrid')))"
    }
  },
  {
    "question": "How can I use the LightRAG class to insert texts from files into the working directory?",
    "answer": "You can use the LightRAG class by first creating an instance with a specified working directory and a language model function. Then, read the contents of text files located in the 'input' folder and append them to a list. Finally, call the 'insert' method on the LightRAG instance with this list of texts to insert them into the working directory.",
    "context": {
      "file": "../../palmier-lightrag/index.py",
      "chunk_text": "from lightrag import LightRAG\nfrom lightrag.llm import gpt_4o_mini_complete, gpt_4o_complete\nimport os\nWORKING_DIR = './ragtest'\nif not os.path.exists(WORKING_DIR):\n    os.mkdir(WORKING_DIR)\nrag = LightRAG(working_dir=WORKING_DIR, llm_model_func=gpt_4o_mini_complete)\ninput_folder = os.path.join(WORKING_DIR, 'input')\ntexts_to_insert = []\nfor filename in os.listdir(input_folder):\n    if filename.endswith('.txt'):\n        file_path = os.path.join(input_folder, filename)\n        with open(file_path, 'r') as f:\n            texts_to_insert.append(f.read())\nrag.insert(texts_to_insert)"
    }
  }
]